═══════════════════════════════════════════════════════════════════
  ClassGuru Payment Service - Ready for Handoff
═══════════════════════════════════════════════════════════════════

📦 WHAT THIS IS

This folder contains a complete, self-contained Stripe subscription
payment microservice for ClassGuru. It's production-ready and can be
deployed independently.

═══════════════════════════════════════════════════════════════════

📁 FILES IN THIS FOLDER

  README.md              → Complete documentation (setup, API, testing)
  INTEGRATION_NOTE.txt   → How this connects to mainline service
  HANDOFF.txt           → This file

  src/                  → All source code
  ├── server.ts         → Main entry point (Fastify server)
  ├── handlers/         → Internal billing logic (3 handlers)
  ├── routes/           → API endpoints and webhook handler
  ├── lib/              → Database, JWT, Stripe, logging
  └── types/            → TypeScript definitions

  env.example           → Environment variable template
  package.json          → Dependencies and scripts
  tsconfig.json         → TypeScript configuration

═══════════════════════════════════════════════════════════════════

✅ WHAT'S READY

  ✓ Complete Stripe integration (checkout, subscriptions, webhooks)
  ✓ JWT authentication (shares secret with mainline)
  ✓ SQLite database with idempotent webhook processing
  ✓ Internal handler system (create, update, query subscriptions)
  ✓ API routes with validation and error handling
  ✓ Structured logging
  ✓ Production-ready code structure

═══════════════════════════════════════════════════════════════════

🚀 QUICK START (for lead developer)

1. Copy this entire folder to deployment location

2. Install dependencies:
   npm install

3. Configure environment:
   cp env.example .env
   # Edit .env with Stripe keys and JWT secret

4. Run development server:
   npm run dev

5. Test health check:
   curl http://localhost:8790/api/payment/health

═══════════════════════════════════════════════════════════════════

🔗 INTEGRATION WITH MAINLINE

This service is called by the mainline orchestrator through the
payment-gateway plugin. The lead developer needs to ensure:

  1. Mainline has: CG_plugins/plugins/payment-gateway.plugin.ts
  2. Mainline config.json includes payment service URL
  3. Both services share the same JWT_SECRET
  4. This service starts on port 8790

See INTEGRATION_NOTE.txt for details.

═══════════════════════════════════════════════════════════════════

📚 DOCUMENTATION

Everything is in README.md:
  • Complete setup instructions
  • API reference with examples
  • Frontend integration code (React)
  • Database schema
  • Security details
  • Testing guide
  • Production deployment checklist
  • Troubleshooting

═══════════════════════════════════════════════════════════════════

🔑 KEY FEATURES

  • Runs on port 8790 (isolated from mainline)
  • Uses SQLite for storage (ready for DB migration)
  • Idempotent webhook handling (prevents duplicates)
  • JWT-based API authentication
  • Stripe signature verification
  • Structured error handling and logging
  • Monthly subscription plan ($9.90 SGD)

═══════════════════════════════════════════════════════════════════

🎯 DEPLOYMENT NOTES

Development:
  npm run dev

Production build:
  npm run build
  npm start

Production checklist in README.md includes:
  • Switch to live Stripe keys
  • Configure production webhooks
  • Use strong JWT secret (64+ chars)
  • Enable HTTPS
  • Set up backups
  • Configure monitoring

═══════════════════════════════════════════════════════════════════

📞 WHAT LEAD DEVELOPER NEEDS TO KNOW

1. This is a MICROSERVICE (not part of mainline codebase)
2. It communicates via REST API only
3. The mainline calls it through the payment-gateway plugin
4. Both services must be running for payment features to work
5. Start this service BEFORE mainline
6. JWT secret must match exactly

═══════════════════════════════════════════════════════════════════

✨ STATUS: Production Ready

All code tested and documented. Ready to hand off as single folder.

═══════════════════════════════════════════════════════════════════

