openapi: 3.1.0
info:
  title: ClassGuru Payment Service API
  version: 1.0.0
  description: Encapsulated Stripe subscription billing microservice for ClassGuru mainline integration
  contact:
    name: ClassGuru Support

servers:
  - url: http://localhost:8790
    description: Local development
  - url: https://api.classguru.com
    description: Production

security:
  - bearerAuth: []

paths:
  /api/payments/create-session:
    post:
      summary: Create Stripe checkout session (mainline sends only uid)
      description: Creates a Stripe checkout session for new subscription. Mainline sends only uid, payment service decides the plan internally.
      security: 
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - uid
              properties:
                uid:
                  type: string
                  description: User ID (must match JWT sub unless admin)
                  example: user-123456
                ad_source:
                  type: string
                  description: Advertising source for analytics
                  example: google_ads
                campaign_id:
                  type: string
                  description: Campaign identifier for analytics
                  example: summer_promo_2024
      responses:
        '200':
          description: Session created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                code: 200
                message: Session created
                date: "2025-01-22T04:00:00Z"
                requestId: "req_abcd123"
                data:
                  checkoutUrl: "https://checkout.stripe.com/pay/cs_test_..."
                  requestId: "req_abcd123"
                  orderId: "order_xyz789"
                  sessionId: "cs_test_..."
        '400':
          description: Invalid request (missing uid)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized (invalid JWT)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Forbidden (user trying to create session for another user)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /api/payments/status/{requestId}:
    get:
      summary: Get payment status by request ID
      description: Query payment status using the short-lived request ID returned from create-session
      security: 
        - bearerAuth: []
      parameters:
        - name: requestId
          in: path
          required: true
          schema: 
            type: string
          description: Short-lived request ID (15 min TTL)
          example: req_abcd123
      responses:
        '200':
          description: Payment status retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                pending:
                  summary: Payment pending
                  value:
                    code: 200
                    message: Payment status retrieved
                    date: "2025-01-22T04:00:00Z"
                    requestId: "req_xyz789"
                    data:
                      requestId: "req_abcd123"
                      orderId: "order_xyz789"
                      status: "pending"
                      amount: 9.90
                      currency: "USD"
                      plan: "monthly-plan"
                      createdAt: 1733011200000
                      updatedAt: 1733011200000
                success:
                  summary: Payment successful
                  value:
                    code: 200
                    message: Payment status retrieved
                    date: "2025-01-22T04:00:00Z"
                    requestId: "req_xyz789"
                    data:
                      requestId: "req_abcd123"
                      orderId: "order_xyz789"
                      status: "success"
                      amount: 9.90
                      currency: "USD"
                      plan: "monthly-plan"
                      createdAt: 1733011200000
                      updatedAt: 1733011200000
        '401':
          description: Unauthorized (invalid JWT)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Forbidden (user trying to access another user's order)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '410':
          description: Request ID expired (15 min TTL)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /api/payments/admin/query/{uid}:
    get:
      summary: Admin query orders by UID
      description: Query all orders for a specific user (admin only)
      security: 
        - bearerAuth: []
      parameters:
        - name: uid
          in: path
          required: true
          schema: 
            type: string
          description: User ID to query
          example: user-123456
      responses:
        '200':
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                code: 200
                message: Orders retrieved
                date: "2025-01-22T04:00:00Z"
                requestId: "req_xyz789"
                data:
                  uid: "user-123456"
                  orders:
                    - orderId: "order_xyz789"
                      status: "active"
                      plan: "monthly-plan"
                      amount: 9.90
                      currency: "USD"
                      createdAt: 1733011200000
                      updatedAt: 1733011200000
                      requestId: "req_abcd123"
                      adSource: "google_ads"
                      campaignId: "summer_promo_2024"
        '401':
          description: Unauthorized (invalid JWT)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Forbidden (admin access required)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /api/payments/health:
    get:
      summary: Health check
      description: Returns service health status
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                code: 200
                message: Service healthy
                date: "2025-01-22T04:00:00Z"
                requestId: "req_xyz789"
                data:
                  status: "healthy"
                  service: "payment"
                  timestamp: 1733011200000

  /webhooks/stripe:
    post:
      summary: Stripe webhook endpoint
      description: Receives and processes Stripe events (signature verified)
      security:
        - StripeSignature: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Stripe event object
      responses:
        '200':
          description: Event processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  received:
                    type: boolean
                    example: true
        '400':
          description: Invalid signature or event
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token signed with shared secret (HS256). Must contain sub (user ID) and iss (mainline)
    StripeSignature:
      type: apiKey
      in: header
      name: stripe-signature
      description: Stripe webhook signature for verification

  schemas:
    ApiResponse:
      type: object
      description: Standardized API response format
      required:
        - code
        - message
        - date
        - requestId
        - data
      properties:
        code:
          type: integer
          description: HTTP status code
          example: 200
        message:
          type: string
          description: Human-readable message
          example: "Operation completed successfully"
        date:
          type: string
          format: date-time
          description: ISO 8601 timestamp
          example: "2025-01-22T04:00:00Z"
        requestId:
          type: string
          description: Unique request identifier
          example: "req_abcd123"
        data:
          type: object
          description: Response payload
          additionalProperties: true

    JWTPayload:
      type: object
      description: JWT token payload structure (authentication/authorization only)
      required:
        - sub
        - iss
      properties:
        sub:
          type: string
          description: User ID (standard JWT subject claim)
          example: user-123456
        iss:
          type: string
          description: Issuer (must be "mainline")
          example: mainline
        iat:
          type: integer
          description: Issued at timestamp
          example: 1699999000
        exp:
          type: integer
          description: Expiration timestamp
          example: 1700000000
        email:
          type: string
          format: email
          description: User email (optional, for display/support only)
          example: user@example.com
        roles:
          type: array
          items:
            type: string
          description: User roles/permissions (optional, "admin" for admin access)
          example: ["user", "admin"]

tags:
  - name: Payments
    description: Payment operations for mainline integration
  - name: Admin
    description: Admin-only operations
  - name: Health
    description: Service health monitoring
  - name: Webhooks
    description: External webhook handlers