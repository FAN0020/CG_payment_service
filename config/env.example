# ============================================================================
# ClassGuru Payment Service - Environment Configuration
# ============================================================================
# Copy this file to .env and fill in your actual values

# ----------------------------------------------------------------------------
# Server Configuration
# ----------------------------------------------------------------------------
PORT=8790
DB_PATH=./data/payment.db

# ----------------------------------------------------------------------------
# JWT Authentication (for YOUR API security)
# ----------------------------------------------------------------------------
# This secret is used to validate JWT tokens from your mainline service
# - For development: Can use the demo secret below
# - For production: MUST generate a strong random secret (32+ characters)
# 
# Generate a secure secret:
#   node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
#
JWT_SECRET=demo-secret-key-change-in-production

# ----------------------------------------------------------------------------
# Stripe Configuration (for payment processing)
# ----------------------------------------------------------------------------
# Get these from: https://dashboard.stripe.com/test/apikeys
#
# IMPORTANT: These are INDEPENDENT from JWT!
# - JWT authenticates users to YOUR service
# - Stripe keys let YOUR service talk to Stripe
#
# For Testing (Test Mode):
#   1. Sign up at https://stripe.com
#   2. Stay in "Test mode" (toggle in top right)
#   3. Get keys from: https://dashboard.stripe.com/test/apikeys
#      - Secret key: sk_test_...
#      - Publishable key: pk_test_... (not needed for backend)
#
# For Production (Live Mode):
#   1. Switch to "Live mode" in Stripe Dashboard
#   2. Get live keys (sk_live_...)
#
STRIPE_SECRET_KEY=sk_test_REPLACE_WITH_YOUR_STRIPE_SECRET_KEY

# Webhook signing secret
# Get this from: https://dashboard.stripe.com/test/webhooks
#   1. Create endpoint: https://your-domain.com/webhooks/stripe
#   2. Select events: checkout.session.completed, customer.subscription.*
#   3. Copy the signing secret
#
# For local development, use ngrok or Stripe CLI
# See STRIPE_SETUP_GUIDE.md for details
#
STRIPE_WEBHOOK_SECRET=whsec_REPLACE_WITH_YOUR_WEBHOOK_SECRET

# Product Price ID
# Get this from: https://dashboard.stripe.com/test/products
#   1. Create a product: "ClassGuruAI Monthly Subscription"
#   2. Add recurring price: $9.90/month
#   3. Copy the price ID (starts with price_...)
#
STRIPE_MONTHLY_PRICE_ID=price_REPLACE_WITH_YOUR_PRICE_ID

# ----------------------------------------------------------------------------
# Plan Configuration
# ----------------------------------------------------------------------------
# These should match your Stripe product pricing
MONTHLY_PLAN_AMOUNT=9.90
MONTHLY_PLAN_CURRENCY=SGD

# ----------------------------------------------------------------------------
# Frontend URLs
# ----------------------------------------------------------------------------
# Where to redirect users after payment
# - Success: Payment completed successfully
# - Cancel: User cancelled the payment
#
# For local development:
FRONTEND_SUCCESS_URL=http://localhost:3000/payment/success
FRONTEND_CANCEL_URL=http://localhost:3000/payment/cancel

# For production:
# FRONTEND_SUCCESS_URL=https://yourdomain.com/payment/success
# FRONTEND_CANCEL_URL=https://yourdomain.com/payment/cancel

# ----------------------------------------------------------------------------
# Notes
# ----------------------------------------------------------------------------
# 
# Quick Start for Testing:
# 1. Copy this file to .env
# 2. Keep JWT_SECRET as-is for testing
# 3. Replace all Stripe values with your test keys
# 4. See STRIPE_SETUP_GUIDE.md for detailed instructions
#
# Production Checklist:
# - [ ] Generate strong JWT_SECRET (32+ chars)
# - [ ] Use Stripe live mode keys (sk_live_...)
# - [ ] Update webhook URL to production domain
# - [ ] Update frontend URLs to production domain
# - [ ] Test with Stripe test cards first
# - [ ] Enable live mode only when ready
#
